{"version":3,"sources":["components/Grid/style.js","components/Cell/style.js","components/Cell/index.js","components/Grid/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["StyledGrid","styled","div","_templateObject","props","concat","rows","StyledCell","style_templateObject","revealed","Cell","_this$props","this","mine","handleCellClick","mineCount","x","y","className","react_default","a","createElement","isNumber","onClick","PureComponent","Grid","state","grid","mineAmount","_this","cols","make2DArray","arr","Array","i","length","generateGrid","_this$state","options","j","push","key","gridWithMine","placeMines","gridWithCounter","countMines","setState","amount","index","Math","floor","random","pick","splice","counter","xOff","yOff","newGrid","revealNeighbor","Object","toConsumableArray","_this$props2","neighbour","renderGrid","map","cell","components_Cell","_this$state2","handleClick","React","App","components_Grid","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ba4a5bd.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledGrid = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-rows: ${(props) => `repeat(${props.rows}, ${500 / props.rows}px)`};\n  grid-auto-columns: ${(props) => `${500 / props.rows}px`};\n  justify-content: center;\n  align-items: center;\n\n  position: relative;\n  width: 500px;\n  margin: 10vh auto;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: 3px 5px 20px rgba(0, 0, 0, 0.25);\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    pointer-events: none;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-image: url(\"/img/bg.png\");\n    opacity: 0.35;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const StyledCell = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  justify-self: center;\n  align-self: center;\n  height: 100%;\n  width: 100%;\n  border: ${(props) => (props.revealed ? \"none\" : \"1px dashed #6fbd73\")};\n  cursor: pointer;\n\n  &.land {\n    background: #4caf50;\n  }\n  &.empty {\n    background: #795548;\n  }\n  &.mine {\n    background: #ffffff;\n  }\n  &.num-1 {\n    background: #8bc34a;\n  }\n  &.num-2 {\n    background: #cddc39;\n  }\n  &.num-3 {\n    background: #ffeb3b;\n  }\n  &.num-4 {\n    background: #ffc107;\n  }\n  &.num-5 {\n    background: #ff9800;\n  }\n  &.num-6 {\n    background: #ff5722;\n  }\n  &.num-7 {\n    background: #e91e63;\n  }\n  &.num-8 {\n    background: #673ab7;\n    color: white;\n  }\n  &:hover {\n    background: #bdbdbd;\n  }\n`;\n","import React, {PureComponent} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {StyledCell} from \"./style\";\n\nclass Cell extends PureComponent {\n  render() {\n    const {revealed, mine, handleCellClick, mineCount, x, y} = this.props;\n    let className = \"land\";\n    if (revealed) {\n      if (mine) {\n        className = \"mine\";\n      } else if (mineCount > 0) {\n        className = `num-${mineCount}`;\n      } else {\n        className = \"empty\";\n      }\n    }\n    return (\n      <StyledCell\n        revealed={revealed}\n        mine={mine}\n        isNumber={mineCount > 0}\n        className={className}\n        onClick={() => handleCellClick(x, y)}\n      >\n        {revealed ? (mine ? \"ðŸ‘»\" : mineCount === 0 ? \"\" : mineCount) : \"\"}\n      </StyledCell>\n    );\n  }\n}\n\nCell.propTypes = {};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {StyledGrid} from \"./style\";\nimport Cell from \"../Cell/\";\n\nclass Grid extends React.PureComponent {\n  state = {\n    grid: [],\n    mineAmount: this.props.mineAmount,\n    cols: this.props.cols,\n    rows: this.props.rows,\n  };\n\n  make2DArray = (cols, rows) => {\n    const arr = new Array(cols);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = new Array(rows);\n    }\n    return arr;\n  };\n\n  generateGrid = () => {\n    const {cols, rows, mineAmount} = this.state;\n\n    const grid = this.make2DArray(cols, rows);\n    let options = [];\n    for (let i = 0; i < cols; i++) {\n      for (let j = 0; j < rows; j++) {\n        let x = i;\n        let y = j;\n        options.push([x, y]);\n\n        grid[x][y] = {\n          key: j + x * cols,\n          revealed: false,\n          mine: false,\n          mineCount: 0,\n          x,\n          y,\n        };\n      }\n    }\n\n    const gridWithMine = this.placeMines(mineAmount, grid, options);\n    const gridWithCounter = this.countMines(gridWithMine);\n\n    this.setState({grid: gridWithCounter});\n  };\n\n  placeMines = (amount, grid, options) => {\n    let gridWithMine = grid;\n\n    for (let i = 0; i < amount; i++) {\n      let index = Math.floor(Math.random() * options.length);\n      let pick = options[index];\n      let x = pick[0];\n      let y = pick[1];\n\n      gridWithMine[x][y].mine = true;\n\n      options.splice(index, 1);\n    }\n\n    return gridWithMine;\n  };\n\n  countMines = (grid) => {\n    const {cols, rows} = this.props;\n\n    for (let i = 0; i < cols; i++) {\n      for (let j = 0; j < rows; j++) {\n        let x = i;\n        let y = j;\n\n        if (grid[x][y].mine) {\n          grid[x][y].mineCount = -1;\n          continue;\n        }\n        let counter = 0;\n        for (let xOff = -1; xOff <= 1; xOff++) {\n          for (let yOff = -1; yOff <= 1; yOff++) {\n            if (x + xOff > -1 && x + xOff < cols && y + yOff > -1 && y + yOff < rows) {\n              let neighbour = grid[x + xOff][y + yOff];\n              if (neighbour.mine) {\n                counter++;\n              }\n            }\n          }\n        }\n        grid[x][y].mineCount = counter;\n      }\n    }\n\n    return grid;\n  };\n\n  handleCellClick = (x, y) => {\n    const {grid} = this.state;\n\n    if (grid[x][y].revealed) return;\n\n    let newGrid;\n    if (grid[x][y].mineCount === 0) {\n      newGrid = this.revealNeighbor(grid, x, y);\n    } else {\n      newGrid = grid;\n      newGrid[x][y].revealed = true;\n    }\n    this.setState({grid: [...newGrid]});\n  };\n\n  revealNeighbor = (grid, x, y) => {\n    const {cols, rows} = this.props;\n\n    for (let xOff = -1; xOff <= 1; xOff++) {\n      for (let yOff = -1; yOff <= 1; yOff++) {\n        if (x + xOff > -1 && x + xOff < cols && y + yOff > -1 && y + yOff < rows) {\n          let neighbour = grid[x + xOff][y + yOff];\n          if (!neighbour.revealed && !neighbour.mine) {\n            neighbour.revealed = true;\n            if (neighbour.mineCount === 0) {\n              this.revealNeighbor(grid, x + xOff, y + yOff);\n            }\n          }\n        }\n      }\n    }\n\n    return grid;\n  };\n\n  renderGrid = () => {\n    const {grid} = this.state;\n\n    if (grid.length === 0) return;\n\n    return grid.map((cols) => {\n      return cols.map((cell) => {\n        return (\n          <Cell\n            key={cell.key}\n            x={cell.x}\n            y={cell.y}\n            mine={cell.mine}\n            mineCount={cell.mineCount}\n            revealed={cell.revealed}\n            handleCellClick={this.handleCellClick}\n          />\n        );\n      });\n    });\n  };\n  componentDidMount() {\n    this.generateGrid();\n  }\n  componentDidUpdate() {\n    // console.log(\"up\");\n    // this.renderGrid();\n  }\n  render() {\n    const {grid, cols, rows} = this.state;\n    return (\n      <StyledGrid onClick={this.handleClick} cols={cols} rows={rows}>\n        {grid && this.renderGrid()}\n      </StyledGrid>\n    );\n  }\n}\n\nGrid.propTypes = {\n  cols: PropTypes.number.isRequired,\n  rows: PropTypes.number.isRequired,\n};\n\nexport default Grid;\n","import React, {Component} from \"react\";\nimport Grid from \"../Grid\";\n\nclass App extends Component {\n  render() {\n    return <Grid cols={20} rows={20} mineAmount={45} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}